package com.wangcai.lottery.pattern;

import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.text.Html;
import android.widget.Toast;

import com.wangcai.lottery.app.BaseFragment;
import com.wangcai.lottery.base.Preferences;
import com.wangcai.lottery.base.net.RestCallback;
import com.wangcai.lottery.base.net.RestRequest;
import com.wangcai.lottery.base.net.RestRequestManager;
import com.wangcai.lottery.base.net.RestResponse;
import com.wangcai.lottery.data.Version;
import com.wangcai.lottery.data.VersionCommand;
import com.wangcai.lottery.service.UpdateService;

import util.UpdateAppUtils;

/**
 * 负责版本检查，弹窗提醒，强制更新
 * Created by Alashi on 2016/3/1.
 */
public class VersionChecker implements RestCallback<Version> {
    private static final String SHARED_KEY = "last-time-check-version";
    /**
     * 最小提醒间隔
     */
    private static final long SPACE_MIN_TIME = 1000L * 60 * 30;//30分钟

    private BaseFragment fragment;
    //用户主动触发版本检查时，需要提醒进度
    private boolean isUserAction;
    private Version version;
//    private AlertDialog dialog;

    public VersionChecker(BaseFragment fragment) {
        this.fragment = fragment;
    }

    public void startCheck() {
        startCheck(false);
    }

    public void startCheck(boolean isUserAction) {
        this.isUserAction = isUserAction;
        RestRequestManager.executeCommand(fragment.getActivity(), new VersionCommand(), this, 0, fragment);
    }

    private void handleUpgrade() {
            /*Uri uri = Uri.parse(version.getFilename());
            Intent intent = new Intent(Intent.ACTION_VIEW, uri);
            intent.addCategory(Intent.CATEGORY_BROWSABLE);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            fragment.getActivity().startActivity(intent);*/
        if (version.isForce()) {
            //延时调用Activity.finish()，否则上面startActivity弹出的选择对话框后出现的很慢
            //new Handler().postDelayed(() -> fragment.getActivity().finish(), 500);
            /*dialog.dismiss();
            AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getActivity()).setMessage
                    ("下载完成后将自动提示安装\n（如果下载失败，请重启应用或登录官网扫码下载）");
            dialog = builder.create();
            dialog.setCanceledOnTouchOutside(false);
            dialog.setCancelable(false);
            dialog.show();
            Intent intent = new Intent(fragment.getActivity(), UpdateService.class);
            intent.putExtra("updateUrl", version.getFilename());
            fragment.getActivity().startService(intent);*/
        }
    }

    private void showDialog() {
        if (fragment.isFinishing()) {
            return;
        }
        /*AlertDialog.Builder builder = new AlertDialog.Builder(fragment.getActivity()).setTitle("新版本").setMessage(Html
                .fromHtml(version.getDescription())).setPositiveButton("马上升级", (dialog, which) -> handleUpgrade());

        if (!version.isForce()) {
            builder.setNegativeButton("稍后升级", (dialog, which) -> dialog.dismiss());
        }

        dialog = builder.create();
        dialog.setCanceledOnTouchOutside(false);
        dialog.setCancelable(false);
        dialog.show();*/

        UpdateAppUtils updateAppUtils = UpdateAppUtils.from (fragment.getActivity ( ));
        updateAppUtils.serverVersionCode (version.getVersion ( ))
                .serverVersionName (version.getVersion ( ) + "")
                .apkPath (version.getFilename ( ))
                .showNotification (false)
                .updateInfo (version.getDescription ( ))
                .downloadBy (UpdateAppUtils.DOWNLOAD_BY_APP);
        if (version.isForce( )) {
            updateAppUtils.isForce (true);
        }
        updateAppUtils.update ( );
    }

    /**
     * 获取版本号(内部识别号)
     */
    private static int getVersionCode(Context context) {
        try {
            PackageInfo pi = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
            return pi.versionCode;
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
            return 0;
        }
    }

    @Override
    public boolean onRestComplete(RestRequest request, RestResponse<Version> response) {
        if (!fragment.isAdded()) {
            return true;
        }
        version = response.getData();
        if (version == null) {
            return true;
        }
        if (version.getVersion() > getVersionCode(request.getContext())) {
            long lastTime = Preferences.getLong(fragment.getActivity(), SHARED_KEY, 0);
            if (version.isForce() || Math.abs(System.currentTimeMillis() - lastTime) > SPACE_MIN_TIME) {
                showDialog();
                Preferences.saveLong(fragment.getActivity(), SHARED_KEY, System.currentTimeMillis());
            }
        } else if (isUserAction) {
            fragment.tipDialog("已经是最新版本\n版本号:" + getVersionCode(request.getContext()));
        }
        return true;
    }

    @Override
    public boolean onRestError(RestRequest request, int errCode, String errDesc) {
        if (isUserAction && fragment.isAdded()) {
            fragment.showToast("版本检查失败，请稍后重试", Toast.LENGTH_SHORT);
        }
        return true;
    }

    @Override
    public void onRestStateChanged(RestRequest request, @RestRequest.RestState int state) {
        if (isUserAction) {
            if (state == RestRequest.RUNNING) {
                fragment.dialogShow("正在检查版本...");
            } else {
                fragment.dialogHide();
            }
        }
    }
}
